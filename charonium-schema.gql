# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Charge {
  addresses: JSON
  cancelUrl: String
  chargeId: Int!
  code: String!
  commissions: [Commission!]!
  createdAt: DateTime!
  customer: Customer
  customerId: Int
  description: String
  exchangeRates: JSON
  expiresAt: DateTime!
  feeRate: Float!
  hostedUrl: String!
  localExchangeRates: JSON
  name: String!
  paymentThreshold: JSON
  payments: [Payment!]!
  pricing: JSON!
  pricingType: String!
  purchaseActivity: PurchaseActivity
  redirectUrl: String
  updatedAt: DateTime
}

type Commission {
  amount: Float!
  charge: Charge
  chargeId: Int
  commissionId: Int!
  commissionRate: Float!
  createdAt: DateTime!
  currency: String!
  customer: Customer
  customerId: Int
  isTransferred: Boolean!
  tier: Int!
  updatedAt: DateTime
}

type CommissionBase {
  amount: Float!
  chargeId: Int
  commissionId: Int!
  commissionRate: Float!
  createdAt: DateTime!
  currency: String!
  customerId: Int
  isTransferred: Boolean!
  tier: Int!
  updatedAt: DateTime
}

type CommissionBaseResult {
  data: [CommissionBase]!
  nextPageCursor: Int
}

type CommissionResult {
  data: [Commission]!
  nextPageCursor: Int
}

type Customer {
  customerId: Int!
  customerStatus: CustomerStatus!
  email: String!
  emailStatus: EmailStatus!
  name: String!
  referees: [Customer!]
  referralCode: String
  referralCustomerId: Int
  referrer: Customer
}

enum CustomerRole {
  ADMIN
  MODERATOR
  USER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EmailInput {
  email: String!
}

enum EmailStatus {
  UNVERIFIED
  VERIFIED
}

type FieldRecord {
  key: String!
  value: String!
}

type Image {
  createdAt: DateTime!
  imageId: Int!
  path: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtPayload {
  email: String!
  exp: Float
  iat: Float
  name: String!
  role: CustomerRole!
  sub: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createTokenPackage(input: TokenPackageCreateInput!): TokenPackage!
  deleteTokenPackage(packageId: Int!): TokenPackage!
  editTokenPackage(input: TokenPackageUpdateInput!, packageId: Int!): TokenPackage!
  forgetPassword(input: EmailInput!): Boolean!
  generatePresignedPost(uploadInput: UploadInput!): PresignedPost!
  generatePresignedUrl(uploadInput: UploadInput!): PresignedUrl!
  generatePresignedUrls(uploadInputs: [UploadInput!]!): [PresignedUrl!]!
  login(input: LoginInput!): String!
  logout: String!
  purchaseTokens(input: PurchaseTokensInput!): String!
  refreshTokens: String!
  register(input: RegisterInput!): Customer!
  registerAdmin(input: RegisterAdminInput!): Boolean!
  resendAdminRegistrationEmail: Boolean!
  resendEmailVerification(input: EmailInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  saveUploadedImage(saveImageInput: SaveImageInput!): Image!
  setOrEditTokenPrice(input: TokenPriceCreateInput!): TokenPrice!
  toggleTokenPackageStatus(packageId: Int!): TokenPackage!
  updateCommissionTransferStatus(commissionId: Int!): CommissionBase!
  verifyEmail(token: String!): VerifyEmailResult!
}

type Payment {
  charge: Charge
  chargeId: Int
  createdAt: DateTime!
  network: String
  paymentId: Int!
  paymentStatus: PaymentStatus!
  status: String
  transaction: String
  type: String
  unresolvedReason: UnresolvedReason
  updatedAt: DateTime
  value: JSON
}

enum PaymentStatus {
  CANCELED
  COMPLETED
  EXPIRED
  MANUALLY_ACCEPTED
  MANUALLY_UNACCEPTED
  NEW
  PENDING
  RESOLVED
  UNRESOLVED
}

type PresignedPost {
  fields: [FieldRecord!]!
  url: String!
}

type PresignedUrl {
  key: String!
  presignedUrl: String!
}

type PurchaseActivity {
  amount: Float!
  charge: Charge
  chargeId: Int
  createdAt: DateTime!
  currency: String!
  package: TokenPackage
  packageId: Int
  purchaseActivityId: Int!
  purchaseConfirmed: Boolean!
  tokenAmount: Float
  tokenPrice: TokenPrice
  tokenPriceId: Int
  updatedAt: DateTime
}

type PurchaseActivityBase {
  amount: Float!
  chargeId: Int
  createdAt: DateTime!
  currency: String!
  packageId: Int
  purchaseActivityId: Int!
  purchaseConfirmed: Boolean!
  tokenAmount: Float
  tokenPriceId: Int
  updatedAt: DateTime
}

type PurchaseActivityBaseResult {
  data: [PurchaseActivityBase]!
  nextPageCursor: Int
}

type PurchaseActivityResult {
  data: [PurchaseActivity]!
  nextPageCursor: Int
}

input PurchaseTokensInput {
  cancel_url: String!
  packageId: Int
  quantity: Int
  redirect_url: String!
}

type Query {
  getAllTokenPackages: TokenPackage
  getAllTokenPackagesByStatus(isActive: Boolean!): TokenPackage
  getCommissions(cursor: Int, customerId: Int, isTransferred: Boolean, limit: Int): CommissionBaseResult!
  getCommissionsForCustomer(cursor: Int, isTransferred: Boolean, limit: Int): CommissionBaseResult!
  getCommissionsWithDetails(cursor: Int, customerId: Int, isTransferred: Boolean, limit: Int): CommissionResult!
  getCommissionsWithDetailsForCustomer(cursor: Int, isTransferred: Boolean, limit: Int): CommissionResult!
  getPurchaseActivities(cursor: Int, customerId: Int, limit: Int! = 10, paymentStatus: PaymentStatus, purchaseConfirmed: Boolean): PurchaseActivityBaseResult!
  getPurchaseActivitiesForCustomer(cursor: Int, limit: Int! = 10, paymentStatus: PaymentStatus, purchaseConfirmed: Boolean): PurchaseActivityBaseResult!
  getPurchaseActivitiesWithDetails(cursor: Int, customerId: Int, limit: Int! = 10, paymentStatus: PaymentStatus, purchaseConfirmed: Boolean): PurchaseActivityResult!
  getPurchaseActivitiesWithDetailsForCustomer(cursor: Int, limit: Int! = 10, paymentStatus: PaymentStatus, purchaseConfirmed: Boolean): PurchaseActivityResult!
  getReferralMap(input: ReferralInput!): [ReferralMap!]!
  getTokenPackage(packageId: Int!): TokenPackage
  getTokenPrice: TokenPrice
  hello: String!
  isCommissionTransferred(commissionId: Int!): Boolean!
  protectedAdminMethod: JwtPayload!
  protectedMethod: JwtPayload!
}

type ReferralEntry {
  referees: [Customer!]!
  referrer: Customer!
}

input ReferralInput {
  referrerId: Float!
  startTier: Float
}

type ReferralMap {
  referralEntries: [ReferralEntry!]!
  tier: String!
}

input RegisterAdminInput {
  newName: String!
  newPassword: String!
  token: String!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  referralCode: String
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

input SaveImageInput {
  path: String!
}

type TokenPackage {
  createdAt: DateTime!
  currency: String!
  description: String
  isActive: Boolean!
  name: String!
  packageId: Int!
  price: Float!
  tokenAmount: Float!
  updatedAt: DateTime
}

input TokenPackageCreateInput {
  currency: String!
  description: String
  isActive: Boolean!
  name: String!
  price: Float!
  tokenAmount: Float!
}

input TokenPackageUpdateInput {
  currency: String
  description: String
  isActive: Boolean
  name: String
  price: Float
  tokenAmount: Float
}

type TokenPrice {
  createdAt: DateTime
  currency: String!
  price: Float!
  tokenPriceId: Int!
  updatedAt: DateTime
}

input TokenPriceCreateInput {
  currency: String!
  price: Float!
}

enum UnresolvedReason {
  DELAYED
  MULTIPLE
  OTHER
  OVERPAID
  UNDERPAID
}

input UploadInput {
  category: String!
  fileExtension: String!
}

type VerifyEmailResult {
  message: String
  success: Boolean
}